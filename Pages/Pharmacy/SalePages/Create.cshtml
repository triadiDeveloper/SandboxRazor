@page
@model SandboxRazor.Pages.Pharmacy.SalePages.CreateModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Create";
}

<h1 class="my-4">Sale Create</h1>

<div class="row">
    <div class="col-md-4">
        <form method="post">
            <!-- Validation Summary -->
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="Sale.MedicationId" id="MedicationIdHidden" />
            <div class="form-group">
                <label asp-for="Sale.MedicationId" class="control-label">Kode Item</label>
                <div class="input-group">
                    <select asp-for="Sale.MedicationId" class="form-control" id="Sale_MedicationId" disabled>
                        <option value="" selected disabled>Select a Item</option>
                        @foreach (var Medication in ViewBag.MedicationList)
                        {
                            <option value="@Medication.Value">@Medication.Text</option>
                        }
                    </select>

                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#GlobalModal">
                        <i class="fas fa-search"></i> Select
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Sale.DocumentDate" class="control-label">Tanggal Pembayaran</label>
                <input asp-for="Sale.DocumentDate" class="form-control" />
                <span asp-validation-for="Sale.DocumentDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Sale.Qty" class="control-label"></label>
                <input asp-for="Sale.Qty" class="form-control" type="number" />
                <span asp-validation-for="Sale.Qty" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Sale.Price" class="control-label">Harga</label>
                <input asp-for="Sale.Price" class="form-control" type="number" />
                <span asp-validation-for="Sale.Price" class="text-danger"></span>
            </div>

            <br />
            <!-- Submit Button -->
            <div class="form-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save
                </button>
                <a class="btn btn-secondary" asp-page="./Index">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
            </div>
        </form>
    </div>
</div>

<!-- Modal for Selecting Medication -->
<div class="modal fade" id="GlobalModal" tabindex="-1" role="dialog" aria-labelledby="GlobalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-dark" id="GlobalModalLabel">Select Medication</h5>
                <button type="button" class="close text-dark" data-dismiss="modal" aria-label="Close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                <!-- Search Input -->
                <input type="text" id="searchInput" class="form-control mb-3" placeholder="Search Medications..." />

                <!-- Medication List -->
                <ul class="list-group" id="MedicationList">
                    <!-- List items will be populated dynamically -->
                </ul>

                <!-- Pagination controls -->
                <nav aria-label="Page navigation example" id="paginationControls" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <!-- Pagination items will be added dynamically -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <!-- Script to handle Medication selection, pagination, and search -->
    <script>
        // Dynamically get the Medications from the ViewBag and convert them into a JavaScript array
        const Medications = @Html.Raw(Json.Serialize(ViewBag.MedicationList));
        let filteredMedications = Medications;  // Start with all Medications

        const itemsPerPage = 5;  // Number of items per page
        let currentPage = 1;     // Start at page 1

        // Function to render the Medication list
        function renderMedications(page) {
            // Calculate the range for pagination
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const MedicationsPage = filteredMedications.slice(startIndex, endIndex);

            const MedicationList = $('#MedicationList');
            MedicationList.empty();  // Clear the current list before rendering new items

            // Log the current Medications page
            console.log("List of Medications on page:", MedicationsPage);

            // Populate the Medication list
            MedicationsPage.forEach(Medication => {
                const listItem = `
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <a href="#" class="Medication-select text-dark font-weight-semibold" data-id="${Medication.value}" data-name="${Medication.text}">
                                            ${Medication.text}
                                        </a>
                                        <span class="badge badge-primary badge-pill">Select</span>
                                    </li>
                                `;
                MedicationList.append(listItem); // Append each Medication to the list
            });

            // Update pagination controls
            renderPagination(page);
        }

        // Function to render pagination controls
        function renderPagination(page) {
            const pageCount = Math.ceil(filteredMedications.length / itemsPerPage);
            const paginationControls = $('#paginationControls').find('ul');
            paginationControls.empty(); // Clear previous pagination

            // Previous button
            const prevButton = `<li class="page-item ${page === 1 ? 'disabled' : ''}"><a class="page-link" href="#" onclick="goToPage(${page - 1})">Previous</a></li>`;
            paginationControls.append(prevButton);

            // Page numbers
            for (let i = 1; i <= pageCount; i++) {
                const pageItem = `<li class="page-item ${i === page ? 'active' : ''}"><a class="page-link" href="#" onclick="goToPage(${i})">${i}</a></li>`;
                paginationControls.append(pageItem);
            }

            // Next button
            const nextButton = `<li class="page-item ${page === pageCount ? 'disabled' : ''}"><a class="page-link" href="#" onclick="goToPage(${page + 1})">Next</a></li>`;
            paginationControls.append(nextButton);
        }

        // Function to handle page change
        function goToPage(page) {
            if (page < 1 || page > Math.ceil(filteredMedications.length / itemsPerPage)) return;
            currentPage = page;
            renderMedications(page);
            renderPagination(page);
        }

        // Function to filter Medications based on the search input
        function filterMedications(query) {
            filteredMedications = Medications.filter(Medication =>
                Medication.text.toLowerCase().includes(query.toLowerCase())
            );
            currentPage = 1;  // Reset to page 1 when search changes
            renderMedications(currentPage);  // Re-render Medication list with filtered data
            renderPagination(currentPage); // Update pagination controls
        }

        // Initial render
        $(document).ready(function () {
            renderMedications(currentPage);  // Load the initial Medication list
            renderPagination(currentPage); // Load the pagination

            // Search input event listener
            $('#searchInput').on('input', function () {
                const query = $(this).val();
                filterMedications(query);
            });
        });

        // Script to handle Medication selection (existing functionality)
        $(document).on('click', '.Medication-select', function (event) {
            event.preventDefault();  // Prevent the default action (modal close)

            var MedicationId = $(this).data('id');
            var MedicationName = $(this).data('name');

            // Set the value of the hidden input field
            document.getElementById("MedicationIdHidden").value = MedicationId;

            // Set the selected Medication ID in the form
            var selectElement = $('select[name="Sale.MedicationId"]'); // Ensure you're targeting the correct select

            // Check if the select element contains the MedicationId before setting it
            var optionExists = selectElement.find('option[value="' + MedicationId + '"]').length > 0;

            if (optionExists) {
                selectElement.val(MedicationId); // Set the value of the select element to the selected MedicationId
            } else {
                console.error('Medication ID not found in options!');
            }

            // Now we prevent the modal from closing. If the modal is configured to close by clicking anywhere inside,
            // we can explicitly prevent the modal from closing when the Medication is clicked.
            $('#GlobalModal').modal('handleUpdate');  // Ensure modal is handled correctly.
        });

    </script>
}