@page
@model SandboxRazor.Pages.Identity.ApplicationUserPages.CreateModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Create";
}

<h1 class="my-4">ApplicationUser Create</h1>

<!-- Bootstrap Tabs for ApplicationUser and ApplicationUser Company -->
<ul class="nav nav-tabs" id="ApplicationUserTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <a class="nav-link active" id="ApplicationUser-tab" data-bs-toggle="tab" href="#ApplicationUser" role="tab" aria-controls="ApplicationUser" aria-selected="true">User Information</a>
    </li>
    <li class="nav-item" role="presentation">
        <a class="nav-link" id="ApplicationUserCompany-tab" data-bs-toggle="tab" href="#ApplicationUserCompany" role="tab" aria-controls="ApplicationUserCompany" aria-selected="false">User Company</a>
    </li>
</ul>
<div class="tab-content" id="ApplicationUserTabsContent">
    <!-- ApplicationUser Tab -->
    <div class="tab-pane fade show active" id="ApplicationUser" role="tabpanel" aria-labelledby="ApplicationUser-tab">
        <hr />
        <div class="row">
            <div class="col-md-6">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <input type="hidden" asp-for="ApplicationUser.EmployeeId" id="EmployeeIdHidden" />
                    <div class="form-group">
                        <label asp-for="ApplicationUser.EmployeeId" class="control-label">Employee</label>
                        <div class="input-group">
                            <select asp-for="ApplicationUser.EmployeeId" class="form-control" id="ApplicationUser_EmployeeId" disabled>
                                <option value="" selected disabled>Select a Employee</option>
                                @foreach (var Employee in ViewBag.EmployeeList)
                                {
                                    <option value="@Employee.Value">@Employee.Text</option>
                                }
                            </select>

                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#GlobalModal">
                                <i class="fas fa-search"></i> Select
                            </button>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.FirstName" class="control-label"></label>
                        <input asp-for="ApplicationUser.FirstName" class="form-control" />
                        <span asp-validation-for="ApplicationUser.FirstName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.LastName" class="control-label"></label>
                        <input asp-for="ApplicationUser.LastName" class="form-control" />
                        <span asp-validation-for="ApplicationUser.LastName" class="text-danger"></span>
                    </div>

                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="ApplicationUser.IsAzureUser" /> @Html.DisplayNameFor(model => model.ApplicationUser.IsAzureUser)
                        </label>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.UserName" class="control-label"></label>
                        <input asp-for="ApplicationUser.UserName" class="form-control" />
                        <span asp-validation-for="ApplicationUser.UserName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.PasswordOwn" class="control-label">Password</label>
                        <div class="input-group">
                            <input asp-for="ApplicationUser.PasswordOwn" class="form-control" id="PasswordOwn" type="password" />
                            <div class="input-group-append">
                                <!-- Use button instead of span for better semantics -->
                                <button type="button" class="btn btn-link" id="togglePassword">
                                    <i class="fas fa-eye" id="eyeIcon"></i> <!-- Eye icon -->
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="ApplicationUser.PasswordOwn" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.Email" class="control-label"></label>
                        <input asp-for="ApplicationUser.Email" class="form-control" />
                        <span asp-validation-for="ApplicationUser.Email" class="text-danger"></span>
                    </div>

                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="ApplicationUser.EmailConfirmed" /> @Html.DisplayNameFor(model => model.ApplicationUser.EmailConfirmed)
                        </label>
                    </div>

                    <div class="form-group">
                        <label asp-for="ApplicationUser.PhoneNumber" class="control-label"></label>
                        <input asp-for="ApplicationUser.PhoneNumber" class="form-control" />
                        <span asp-validation-for="ApplicationUser.PhoneNumber" class="text-danger"></span>
                    </div>
                    <br />
                </form>
            </div>
        </div>
    </div>

    <!-- ApplicationUser Company Tab -->
    <div class="tab-pane fade" id="ApplicationUserCompany" role="tabpanel" aria-labelledby="ApplicationUserCompany-tab">
        <hr />
        <div class="row">
            <div class="col-md-12">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <!-- ApplicationUser Companys Table/Grid -->
                    <table id="ApplicationUserCompaniesTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Company</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.ApplicationUserCompanies.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <select asp-for="ApplicationUserCompanies[@i].CompanyId" class="form-control">
                                            <option value="">Select Company</option>
                                            <!-- Populate Companys here (replace with actual list) -->
                                            <option value="1">Company 1</option>
                                            <option value="2">Company 2</option>
                                        </select>
                                    </td>

                                    <!-- Remove Row Button with Icon -->
                                    <button type="button" class="btn btn-danger remove-row">
                                        <i class="fas fa-trash-alt"></i> Remove
                                    </button>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <!-- Add New Row Button with Icon -->
                    <button type="button" id="addRow" class="btn btn-success">
                        <i class="fas fa-plus"></i> Add Row
                    </button>

                    <br /><br />

                </form>
            </div>
        </div>
    </div>
</div>

<!-- Submit Button -->
<div class="form-group">
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Save
    </button>
    <a class="btn btn-secondary" asp-page="./Index">
        <i class="fas fa-arrow-left"></i> Back to List
    </a>
</div>

<!-- Modal for Selecting Employee -->
<div class="modal fade" id="GlobalModal" tabindex="-1" role="dialog" aria-labelledby="GlobalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-dark" id="GlobalModalLabel">Select Employee</h5>
                <button type="button" class="close text-dark" data-dismiss="modal" aria-label="Close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                <!-- Search Input -->
                <input type="text" id="searchInput" class="form-control mb-3" placeholder="Search Employees..." />

                <!-- Employee List -->
                <ul class="list-group" id="EmployeeList">
                    <!-- List items will be populated dynamically -->
                </ul>

                <!-- Pagination controls -->
                <nav aria-label="Page navigation example" id="paginationControls" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <!-- Pagination items will be added dynamically -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // JavaScript to toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function () {
            var passwordField = document.getElementById('PasswordOwn');
            var eyeIcon = document.getElementById('eyeIcon');

            // Toggle password visibility
            if (passwordField.type === "password") {
                passwordField.type = "text"; // Show password
                eyeIcon.classList.remove('fa-eye'); // Change to open eye icon
                eyeIcon.classList.add('fa-eye-slash'); // Use slashed eye icon
            } else {
                passwordField.type = "password"; // Hide password
                eyeIcon.classList.remove('fa-eye-slash'); // Change to closed eye icon
                eyeIcon.classList.add('fa-eye'); // Use closed eye icon
            }
        });
    </script>

    <!-- Script to handle Employee selection, pagination, and search -->
    <script>
        // Dynamically get the Employees from the ViewBag and convert them into a JavaScript array
        const Employees = @Html.Raw(Json.Serialize(ViewBag.EmployeeList));
        let filteredEmployees = Employees;  // Start with all Employees

        const itemsPerPage = 5;  // Number of items per page
        let currentPage = 1;     // Start at page 1

        // Function to render the Employee list
        function renderEmployees(page) {
            // Calculate the range for pagination
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const EmployeesPage = filteredEmployees.slice(startIndex, endIndex);

            const EmployeeList = $('#EmployeeList');
            EmployeeList.empty();  // Clear the current list before rendering new items

            // Log the current Employees page
            console.log("List of Employees on page:", EmployeesPage);

            // Populate the Employee list
            EmployeesPage.forEach(Employee => {
                const listItem = `
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <a href="#" class="Employee-select text-dark font-weight-semibold" data-id="${Employee.value}" data-name="${Employee.text}">
                                                    ${Employee.text}
                                                </a>
                                                <span class="badge badge-primary badge-pill">Select</span>
                                            </li>
                                        `;
                EmployeeList.append(listItem); // Append each Employee to the list
            });

            // Update pagination controls
            renderPagination(page);
        }

        // Function to render pagination controls
        function renderPagination(page) {
            const pageCount = Math.ceil(filteredEmployees.length / itemsPerPage);
            const paginationControls = $('#paginationControls').find('ul');
            paginationControls.empty(); // Clear previous pagination

            // Previous button
            const prevButton = `<li class="page-item ${page === 1 ? 'disabled' : ''}"><a class="page-link" href="#" onclick="goToPage(${page - 1})">Previous</a></li>`;
            paginationControls.append(prevButton);

            // Page numbers
            for (let i = 1; i <= pageCount; i++) {
                const pageItem = `<li class="page-item ${i === page ? 'active' : ''}"><a class="page-link" href="#" onclick="goToPage(${i})">${i}</a></li>`;
                paginationControls.append(pageItem);
            }

            // Next button
            const nextButton = `<li class="page-item ${page === pageCount ? 'disabled' : ''}"><a class="page-link" href="#" onclick="goToPage(${page + 1})">Next</a></li>`;
            paginationControls.append(nextButton);
        }

        // Function to handle page change
        function goToPage(page) {
            if (page < 1 || page > Math.ceil(filteredEmployees.length / itemsPerPage)) return;
            currentPage = page;
            renderEmployees(page);
            renderPagination(page);
        }

        // Function to filter Employees based on the search input
        function filterEmployees(query) {
            filteredEmployees = Employees.filter(Employee =>
                Employee.text.toLowerCase().includes(query.toLowerCase())
            );
            currentPage = 1;  // Reset to page 1 when search changes
            renderEmployees(currentPage);  // Re-render Employee list with filtered data
            renderPagination(currentPage); // Update pagination controls
        }

        // Initial render
        $(document).ready(function () {
            renderEmployees(currentPage);  // Load the initial Employee list
            renderPagination(currentPage); // Load the pagination

            // Search input event listener
            $('#searchInput').on('input', function () {
                const query = $(this).val();
                filterEmployees(query);
            });
        });

        // Script to handle Employee selection (existing functionality)
        $(document).on('click', '.Employee-select', function (event) {
            event.preventDefault();  // Prevent the default action (modal close)

            var EmployeeId = $(this).data('id');
            var EmployeeName = $(this).data('name');

            // Set the value of the hidden input field
            document.getElementById("EmployeeIdHidden").value = EmployeeId;

            // Set the selected Employee ID in the form
            var selectElement = $('select[name="ApplicationUser.EmployeeId"]'); // Ensure you're targeting the correct select

            // Check if the select element contains the EmployeeId before setting it
            var optionExists = selectElement.find('option[value="' + EmployeeId + '"]').length > 0;

            if (optionExists) {
                selectElement.val(EmployeeId); // Set the value of the select element to the selected EmployeeId
            } else {
                console.error('Employee ID not found in options!');
            }

            // Now we prevent the modal from closing. If the modal is configured to close by clicking anywhere inside,
            // we can explicitly prevent the modal from closing when the Employee is clicked.
            $('#GlobalModal').modal('handleUpdate');  // Ensure modal is handled correctly.
        });

    </script>

    <script>
        // jQuery to dynamically add or remove rows
        $(document).ready(function () {
            // Add new row to table
            $('#addRow').click(function () {
                var newRow = `
                                    <tr>
                                        <td>
                                            <select class="form-control">
                                                <option value="">Select Company</option>
                                                <option value="1">Company 1</option>
                                                <option value="2">Company 2</option>
                                            </select>
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger remove-row">Remove</button>
                                        </td>
                                    </tr>`;
                $('#ApplicationUserCompaniesTable tbody').append(newRow);
            });

            // Remove row from table
            $(document).on('click', '.remove-row', function () {
                $(this).closest('tr').remove();
            });
        });
    </script>
}